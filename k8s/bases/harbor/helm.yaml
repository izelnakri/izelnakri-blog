---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-clair
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBpemVsLWhhcmJvci1kYXRhYmFzZTo1NDMyL3Bvc3RncmVzP3NzbG1vZGU9ZGlzYWJsZSIKICAgICAgIyBOdW1iZXIgb2YgZWxlbWVudHMga2VwdCBpbiB0aGUgY2FjaGUKICAgICAgIyBWYWx1ZXMgdW5saWtlbHkgdG8gY2hhbmdlIChlLmcuIG5hbWVzcGFjZXMpIGFyZSBjYWNoZWQgaW4gb3JkZXIgdG8gc2F2ZSBwcmV2ZW50IG5lZWRsZXNzIHJvdW5kdHJpcHMgdG8gdGhlIGRhdGFiYXNlLgogICAgICBjYWNoZXNpemU6IDE2Mzg0CiAgYXBpOgogICAgIyBBUEkgc2VydmVyIHBvcnQKICAgIHBvcnQ6IDYwNjAKICAgIGhlYWx0aHBvcnQ6IDYwNjEKICAgICMgRGVhZGxpbmUgYmVmb3JlIGFuIEFQSSByZXF1ZXN0IHdpbGwgcmVzcG9uZCB3aXRoIGEgNTAzCiAgICB0aW1lb3V0OiAzMDBzCiAgdXBkYXRlcjoKICAgIGludGVydmFsOiAxMmgK
  redis: cmVkaXM6Ly9pemVsLWhhcmJvci1yZWRpczo2Mzc5LzQ=
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBpemVsLWhhcmJvci1kYXRhYmFzZTo1NDMyL3Bvc3RncmVzP3NzbG1vZGU9ZGlzYWJsZQ==
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "aEJTdnRINGMwY3BWOUo5Wg=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
  CSRF_KEY: "TmYwWjhkUjMwN2VmdU94U1pLelNnbHZ5Q2o1ZzZlSFA="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-database"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "Ym5IQ1poa0tNNmU2TFdQTw=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-notary-server
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBakNDQWVxZ0F3SUJBZ0lRSit6Y1k2ZlNwMmwybUZyVnhxcWZBakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRGt3T0RBd01UWXdObG9YRFRJeApNRGt3T0RBd01UWXdObG93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxocEQ0bEhodEdZclJobTV5eUJ0eDVzVGpDUzE3UGsKUGdGMTdqZVZiVFVmU3lrSDdLK2tOUlhSdnJ0Tkp5TjIrbk1hbDJKWlBIc2U5UldlVXh2YTVBSHBFTWpkQzNwdApBS2F3VmU1aDltNzAwZVdZeUFQejdnM0NPNEhGRk1yM0t0dlZ1cEFqSWV4Q2hmb2lBNUwrMVV2M3l0bi8wdWxUCjROZDFLVjlscVNQOGkzRmtqWFpYZnFLbDlkUCtHcldpekpHSk1zT0RqWnIrWFVUM28rZURnRFlnM3ROWU15QlgKRkdSd2Znb1RjNXBHTUJ0VHBoWW8xTGhCbk9vcUY3UWVIL0JRNU1MOHJWOUFuclhydWtqamZ0NnI4K0c0MzE3Zwp0ajl3aHBSL0tlYWIxajdWN1huMmUxVGZudHNEay9STnNvOW03MWRHMzRRQ09DMTBQWk1kZitzQ0F3RUFBYU5DCk1FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCSU8yWWo3eXhpOGdrYwpYSDZkbkYrSFRDMW1aQlMxejRQUzJyTTJhQ1ZBckk3dkoyS3ZTcWZxS0JXOFNTYUg3WkxkVzFJYjZNUHlEN2l6CkFWVVUxNENrelBkazNPdzZ0NkMyOWZGU3R2ZEczYWV1VDZaTm1memJ4aTdhcDdiN0ZPY3YycmRNRHFWTkZNWmEKckdQbzNnbytnaE81V3MyeithN2RHZlZpVEdvUmZ2OGxCc3lzQVdBbGFNTzdaRFkxaldyejMzckt6UDl4eU0xTQpidy93WWdiN3NONEo3UGE2b1VJK0loM09UOFFlNHl2TlRQTGVqeVZLbE5oVEdCVW05T1NjdmFvS1ppSU9wOGxBCnJaZHRlQlNiWjc1YVlzQmJJWG5CNitnTHRSOTd6V0dFM1BicFovTzB5L2FRN05NRUNBdVl4cjBNRE95SmkxaWIKZTdkNXhuNGMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDRENDQWZDZ0F3SUJBZ0lRZk5xdGV5SENua21ESDdobzZQUVZBREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRGt3T0RBd01UWXdObG9YRFRJeApNRGt3T0RBd01UWXdObG93SkRFaU1DQUdBMVVFQXhNWmFYcGxiQzFvWVhKaWIzSXRibTkwWVhKNUxYTnBaMjVsCmNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxNMTNURTlLSUFCRmp0aFB6TGUKYlhVa2w5VWY5Y0N5aWJkUGs5QW5uNzVoRjN0VkF5VXB2eW03eEh5OTIwejhPNkpFaUhQbVcyS3lBUVdrbTVQegpkUC9jQlVuNHBrZ3NFcllJYkFodlhLTmlVekx3MVR2MVpvNUU0T0dLbWk4R0EybkZMSkFlTytvdlk0K2RIdmphCjI3UUg2a1JwaEg2NzFudC9VWjVZVW9hYkZsSkdjbUMyOTg1ak9GZVhUT1lIcDlkbXhnL2lmK2htRDhCQXNEZE8KN0FnazcyZmhxZVdVR0FiUU5hVHJnR0RCOEpGSXN3T2pMYURCWVJJQm1TWENYVUVYRTUzNVR4akcyZmVXY1A4LwprOHZZV0w0NHQ1WjNoa0UxZHNrUDZpaDJzSnJDSVZzUk9VUXY4RWl2SEdkTnBDbXViRFNUQVUxSzN0WGdrNmRkCkFoa0NBd0VBQWFNL01EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFFU0diVApHdXhpVTZIbjd1aktXSDlTcVB3ODVXcnYzbzE2c2VhbWhYRzFhcG80Mjd4dkpLQmJGMWtlMGtiTW1QYTY1bk5NClE1dU9neGpaY3N1MFhYQ2pIcnJkQ2FVM0pxSVFWUlZKY0pJNDNmVU9YZ0tzS3VSSTNUYU9BWm9rMU9WV09ScjIKTFg4TkRaK2J1eUJDRXU5a3BkdlFpMDNuQmxkZkNnaEZsb3BURDRWSG9SNlVjL3hIYzBJaHRhMkVvdVFwSEE2NQp6VWJYVjRkUW1rNkovUW9EbUZRb2E0bWJZdmJVdmdsckFIYTdESTFPMFpjczZaNWZ5NmdFYm1QMVllNkNLY05nCkJtU0RoVUl5VlZNTkZMdlU4SkFhdzRUd1hobGhYVUtHT0RDancxemlBb0FMaUdLVUk1Q0hBVXNXNFM5SlNxSTUKRGRuaXMwWTNUZU1DZFVFbgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3pYZE1UMG9nQUVXTzJFL010NXRkU1NYMVIvMXdMS0p0MCtUMENlZnZtRVhlMVVECkpTbS9LYnZFZkwzYlRQdzdva1NJYytaYllySUJCYVNiay9OMC85d0ZTZmltU0N3U3RnaHNDRzljbzJKVE12RFYKTy9WbWprVGc0WXFhTHdZRGFjVXNrQjQ3Nmk5amo1MGUrTnJidEFmcVJHbUVmcnZXZTM5Um5saFNocHNXVWtaeQpZTGIzem1NNFY1ZE01Z2VuMTJiR0QrSi82R1lQd0VDd04wN3NDQ1R2WitHcDVaUVlCdEExcE91QVlNSHdrVWl6CkE2TXRvTUZoRWdHWkpjSmRRUmNUbmZsUEdNYlo5NVp3L3orVHk5aFl2amkzbG5lR1FUVjJ5US9xS0hhd21zSWgKV3hFNVJDL3dTSzhjWjAya0thNXNOSk1CVFVyZTFlQ1RwMTBDR1FJREFRQUJBb0lCQUZLZ3pqaXFzeWE1Mlk5TgpXajlSRVBUSEIzNkx1dHE3TndZZkdjOEt4ZnVZZHFRMTRUcGNVamlpeTRpY1hTWFUwb1lSeFR4ekJNV3Z2d3JrCkI1dWl6OW84anUrNVJxbldNRlpmOGJlOTZOK29NU1kycG9wN3JtcUFWWk9JUFdqYkErM2JySjFTWTF1cHQrVDYKazlJM3pyN21PMXlKcmo1a3l4S3I5R3ptMmo0WE0zRWl0VDN5L205c041bXlPZS91c3BNemN2VzRQNWRXODZ2ZgpGK25NK2pMdnVkQ0dYcjRyNDJIa2lGMmpJQ2ZYTGt1bStrYjZUV2RkVm5jZi90V1pFZ2RHbTJVQTc0eG05WFpnCkVWOENYOEJmOGUybU9ZWTNNbjlLOXJnZDJWSzRyelEyNDJsSTRMUnd2YmpMbnl2dysyQmp6U1laeTFmUTNnTE0KQ0V0ZUpkVUNnWUVBNk9PVXhONklDWEhuYlZOWDQxaDZRMTd6ZmFqd3Q1SmRqSklnd2lqU3hSNys4Wm9WZ2pwZApqY1hKYUV6b0pEL01hTlpRRUpINWFlVDYrL1pFVUVGdFpDdVJvSm4wVTBHckZ1Tm5ScnZ4Vk1aUkUvVGdpcW10ClA3Qm1WVkxVL3N0QlpIaGFtZWJERXFsdThRMlpqOS91VHErVndMZ3lBYWNsQ0FnNWVTbmwwdjhDZ1lFQXhQNmIKaDFQdzNKRUJPQnlvTzAxN05RY2k3STRnUFp3VmhGVjRqdENPSVRPSW5kOXE4K3ptWmZIVW5yWlI0Vy9RYWJsSQpjUjYrQkoyRDF3Y3pBUllVbzY3UEtLOXFMWUFsb2hQT2xmbldrbTViRE96YnBMRE5TU0RvQllEZHdjbHljd1dmCnd1U01qbGVUUVVob1piMHRWbTVlbWlMTHdFNkpXbSs3TUovS1l1Y0NnWUVBMzNSTjhEK2N3NE01RE5yay8weUwKczB6TjBJcGl2YUNBaGpwSG1FUlhSN0FmNm0xdnFjNmFxVWRYb3UzMzU2QVhYNWdTcG5PSm5xT0lkbTJxeWw2Ywp1WHBjZG42QndjakdnbVdiV0hGSWM1RDlobXAxY0ZheDF1UklyQ0dZSVFtaEt1ZVg5d2RGc1FoRlhLRXg4S3hxCkdiRzd2SGgvOHJvUGZBOTRKZHVmbXIwQ2dZQjFNVEs5VTBhYk1QaVV0UmV3RCt3WUkrSzI3K1ptUUpEY1pTeVAKYWFya1BaQXN1MWtaTy9uazgvVVZaa2xYMy9rUXJGVllWbjJjcVVoaGg3cmtEb3JBeGFJZ0Joc1libi8wNSt1aQpkVHNkYWVGbzB3L243Zlp5WnMwaFdRU1Q0SS9odFpyUmlyM0RnSDN0L0hGKzlRZ2Z2eEV3aVRyRmNQTnRoY0xLCnJvVHNTUUtCZ0M4bnlSSndNUzZ3MUYvMnd1WXFPVjAzUi9hTlhVbURMOVpMSVJZTExlRHpSUjA0d1o4by95Y3IKSzRZcW12c2ZCWkVaTUNMS3BicnZTZHBNNHhtMTg3T2hDOVVJSlhKdlhvUVo5a1duamxOeUNNaTZpN3d3ekNCQgpXUDkzWUdwK0EySDRab1B0VnFuVTFnVjFHcm13NVU2NEdZZW4zSHlVQjFMbHc4bHh5RWRvCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIml6ZWwtaGFyYm9yLW5vdGFyeS1zaWduZXIiLAogICAgInBvcnQiOiAiNzg5OSIsCiAgICAidGxzX2NhX2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L2NhLmNydCIsCiAgICAia2V5X2FsZ29yaXRobSI6ICJlY2RzYSIKICB9LAogICJsb2dnaW5nIjogewogICAgImxldmVsIjogImluZm8iCiAgfSwKICAic3RvcmFnZSI6IHsKICAgICJiYWNrZW5kIjogInBvc3RncmVzIiwKICAgICJkYl91cmwiOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBpemVsLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNlcnZlcj9zc2xtb2RlPWRpc2FibGUiCiAgfSwKICAiYXV0aCI6IHsKICAgICJ0eXBlIjogInRva2VuIiwKICAgICJvcHRpb25zIjogewogICAgICAicmVhbG0iOiAiaHR0cHM6Ly9yZWdpc3RyeS5pemVsbmFrcmkuY29tL3NlcnZpY2UvdG9rZW4iLAogICAgICAic2VydmljZSI6ICJoYXJib3Itbm90YXJ5IiwKICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgInJvb3RjZXJ0YnVuZGxlIjogIi9yb290LmNydCIKICAgIH0KICB9Cn0=
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAaXplbC1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzaWduZXI/c3NsbW9kZT1kaXNhYmxlIiwKICAgICJkZWZhdWx0X2FsaWFzIjogImRlZmF1bHRhbGlhcyIKICB9Cn0=
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "Yll2ZnIzRFI3VlF3V0toTw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-trivy
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9pemVsLWhhcmJvci1yZWRpczo2Mzc5LzU=
  gitHubToken: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "izel-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "izel-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "1000"
  EXT_ENDPOINT: "https://registry.izelnakri.com"
  CORE_URL: "http://izel-harbor-core:80"
  JOBSERVICE_URL: "http://izel-harbor-jobservice"
  REGISTRY_URL: "http://izel-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://izel-harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://izel-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "izel-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://izel-harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://izel-harbor-clair:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://izel-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://izel-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "izel-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://izel-harbor-redis:6379/2"
  PORTAL_URL: "http://izel-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://izel-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://izel-harbor-core:80"
  TOKEN_SERVICE_URL: "http://izel-harbor-core:80/service/token"
  REGISTRY_URL: "http://izel-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://izel-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "izel-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/portal/comfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-portal"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "izel-harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: izel-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: izel-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: izel-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: izel
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-clair"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: izel
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: izel
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-database"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: izel
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: izel
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-notary-server
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: izel
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-notary-signer
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: izel
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-portal"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: izel
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-redis
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: izel
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: izel
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-trivy"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
  selector:
    release: izel
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 3f20e0d691299f8b5ec82bcd47588ac99de7fdd9fae87674404585b64d7b42e4
        checksum/secret: 3a1bf456493e6572b25eabe3cbaad3f5e82f8c31357a61e86d36b409d9e9b3c8
        checksum/secret-core: bc522c9acab7cd8d804abf2c9a12a05051c2e49b0bad9500094b4b2ebf1dbbf0
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "izel-harbor-chartmuseum"
        - secretRef:
            name: "izel-harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: izel-harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: izel-harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-clair
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: 3e8557dd7f91d0e408b2771f2cd983b14e5989ea6e309763754dc255baa696b4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: izel-harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: izel-harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "izel-harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: izel
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 16dd248c3ef5cec9bf4d57007ce8d44840281b9cd5b16042cf6d6365f80a569b
        checksum/secret: cac3d9c758fe5070a5af14bd82b593dc30252b551c49422d2d3b47563c0599b7
        checksum/secret-jobservice: 691a654606a8de773d5a8b258bd8d5e3e4e43056192f420b4e0ece5a7866246a
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "izel-harbor-core"
        - secretRef:
            name: "izel-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: izel-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "izel-harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: izel-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: izel-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: izel-harbor-core
      - name: ca-download
        secret:
          secretName: harbor-core-tls
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: f034df1a985d6329bd0e3ced612d9180d9d58e94045d8d5854696cf087fab277
        checksum/configmap-env: 7d48586e3613fd54880ad209a46cf3e5f0d584ca861e86fe37cbef5c8fcd076e
        checksum/secret: 04f7f340e5af83eb5b1cdc6441b80540f171949f09236ba57607bfe5fd30b5a2
        checksum/secret-core: adba3b044dd7870d788d4f7ba1ecdb33ed3d7bd9b11a2662f5e70a788a8a11fb
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: izel-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "izel-harbor-jobservice-env"
        - secretRef:
            name: "izel-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "izel-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: izel-harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-notary-server
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 0ceaf80c0abb9e8a565c1b3af2c783c30399d3428512d41ba03e0e21b3cfc20d
        checksum/secret-core: 8b52176c448d1225f262991d4719d471bb6790f5b032ed3774096061323bae38
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@izel-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "izel-harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: izel-harbor-core
      - name: signer-certificate
        secret:
          secretName: izel-harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-notary-signer
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 788fd240fb490f3fa2c0c35a080223a4e9e0e548e4d8ba476829e2f8bb3cd05f
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@izel-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "izel-harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: izel-harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-portal"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: izel
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "izel-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: d4d536b535b5b952c7737ec6f212d2f2412e5620a801b1299adced25dcb468c3
        checksum/secret: 1aa5fc05e3828441645be46deccb9f36e4cf3e5ec003fbdeb24c25e1fc230a4d
        checksum/secret-jobservice: b4f7ea5fa3a683a3212509f5bc35bc0b7b581899d02d0903759d91fc448e715f
        checksum/secret-core: 17e9a4ffc422cee307fe20e483266a2d282153ccfb0290f722ab20bf32dd5f36
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "izel-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "izel-harbor-registry"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: izel-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: izel-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: izel-harbor-registry
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-root-certificate
        secret:
          secretName: izel-harbor-core
      - name: registry-config
        configMap:
          name: "izel-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: izel-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "izel-harbor-database"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "izel-harbor-database"
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 272329a94ad9a2c9bdb8cc726edb70b53b4b862ce0ba2f52b5a00d61382a871a
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        securityContext:
          runAsUser: 0
        image: goharbor/harbor-db:v2.0.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R postgres:postgres /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v2.0.2
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "izel-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: izel-harbor-redis
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: izel-harbor-redis
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: izel-harbor-trivy
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: izel-harbor-trivy
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: f9adc0cc3c447a74fdbafe3709e13e89e5404c7834316b01dcb69cc7af5186f3
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: izel-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: izel-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: izel-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "izel-harbor-ingress"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
  annotations:
    certmanager.k8s.io/cluster-issuer: harbor-core-issuer
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  tls:
  - secretName: harbor-core-tls
    hosts:
    - registry.izelnakri.com
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: izel-harbor-portal
          servicePort: 80
      - path: /api/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /service/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /v2/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /chartrepo/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /c/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
    host: registry.izelnakri.com
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "izel-harbor-ingress-notary"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
  annotations:
    certmanager.k8s.io/cluster-issuer: harbor-core-issuer
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  tls:
  - secretName: harbor-notary-tls
    hosts:
    - notary.izelnakri.com
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: izel-harbor-notary-server
          servicePort: 4443
    host: notary.izelnakri.com
