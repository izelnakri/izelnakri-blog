---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-clair
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBpemVsLWhhcmJvci1kYXRhYmFzZTo1NDMyL3Bvc3RncmVzP3NzbG1vZGU9ZGlzYWJsZSIKICAgICAgIyBOdW1iZXIgb2YgZWxlbWVudHMga2VwdCBpbiB0aGUgY2FjaGUKICAgICAgIyBWYWx1ZXMgdW5saWtlbHkgdG8gY2hhbmdlIChlLmcuIG5hbWVzcGFjZXMpIGFyZSBjYWNoZWQgaW4gb3JkZXIgdG8gc2F2ZSBwcmV2ZW50IG5lZWRsZXNzIHJvdW5kdHJpcHMgdG8gdGhlIGRhdGFiYXNlLgogICAgICBjYWNoZXNpemU6IDE2Mzg0CiAgYXBpOgogICAgIyBBUEkgc2VydmVyIHBvcnQKICAgIHBvcnQ6IDYwNjAKICAgIGhlYWx0aHBvcnQ6IDYwNjEKICAgICMgRGVhZGxpbmUgYmVmb3JlIGFuIEFQSSByZXF1ZXN0IHdpbGwgcmVzcG9uZCB3aXRoIGEgNTAzCiAgICB0aW1lb3V0OiAzMDBzCiAgdXBkYXRlcjoKICAgIGludGVydmFsOiAxMmgK
  redis: cmVkaXM6Ly9pemVsLWhhcmJvci1yZWRpczo2Mzc5LzQ=
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBpemVsLWhhcmJvci1kYXRhYmFzZTo1NDMyL3Bvc3RncmVzP3NzbG1vZGU9ZGlzYWJsZQ==
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "eDhpeGdGbVAycjRqbm5Bdg=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
  CSRF_KEY: "RER3eWRJaEpBOE1uOWZDeDRZRUdvUFo0Yzlxd3EwWkM="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-database"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "dWpkQjlRVlpONXpGNThRdg=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-notary-server
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBakNDQWVxZ0F3SUJBZ0lRYTFNVnU5NDNyQmpXOWdjTUZscUdDREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRGN4T1RBd01EY3dNRm9YRFRJeApNRGN4T1RBd01EY3dNRm93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5wWEhYS0lzaFQwMWlGU3d3WU41Tm0xZnIxWEJnMnIKTUM4NWpTQ3JQdXdyM0czNUhCTWk2RVdkTVhHUXMzNzNRQk5BL3V6YjRLOE54b0djb0lTYVBCd2ZFbit2WldETwpPdHNXVGF2cVhMWUl3ZkRaenQyS0QwNms2WlY1S0c5TEpLemMycUk0cHBHdmlmTy9NdHlPOWp4ZnZwMHNQMVJ2ClR2TTZxdWZzSmFMdVlqSDlCWHJXOTdSaFJtU1VwTXU3Z0xxYkttM0FFNE05QW1pTW80L0lUeEV1dDVjYTN1cSsKcFVZZ2haWS92R3BJR1k2bEZTaElLQ3JHeFhvbDJ2YjhuRnVjL1hmYmh2bEhLRWJGcm95M3AzSzhJRzgvaEtmMApTY214dkFQTW9aelpXQU1wdHJWSm1sK1BwQ3NadTFnQVc5bWpjbkRRdDlZSzJqaW1OY29oOUJFQ0F3RUFBYU5DCk1FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDM0oxQWZHWDcxWStreQpDeEUwczlNTDd5ME9rMWtzb0ppcW8wd0hpVTVvWHVLbXlnaTh4aWhhQzB1L2w5bU9JVmZMSUFEUHFqT1RENGkwClQwRDdqcjhnY011a015UG9JMTUwdWpOVWR5eGJ1SnM3bVhFM1lOTkg0b2Q0NjVPS0dTUDd2K0RjWkw0ZHAzRFcKN25Ra1RpVDVnM1gwaE9LNStISkNrQVlZOTJsUlRtd3UxR0cxSGh1bG5KYXp4QTNZVlVON1VMbzd2M1g0Ty80SQo0a1p1RU5ZN3VvMitJU2RQb2lMMHljSFVUcEhlSW9ZdjN5Y1UyYlBHOW96WWZUbHlSTk5uVlVWOHdGZlhFQVlTClF0K3BNOFNhMXBtbDkyS0dSczkrZTZia1F0QUZsZHFzZnp5M1dJYUhUNmhDNjFoYmNRMzRDbWhKMzg2YXBhbjIKVEN3Mk1TTUcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lSQVBCbTErY0dNOWVDc1hjREtvWHdxWXN3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREEzTVRrd01EQTNNREZhRncweQpNVEEzTVRrd01EQTNNREZhTUNReElqQWdCZ05WQkFNVEdXbDZaV3d0YUdGeVltOXlMVzV2ZEdGeWVTMXphV2R1ClpYSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQk9YWUlZdHVMVFQ5UXRQSC8KTWJjTEdBeW9xa3RUUkMwQ2lLd29uVFVqdVBpUEZTejRQL3EvaVB4dmRrZndNRDZBb2VaR1FpMGhrYVVHL0t4dgpQWENSZ0EzelR6NjJaNnEvYjVhMFd2TkFGOHQwMDFVby8xL2ZGSTRqWVpLajZDZzlPZzZwRFZwK2ZGdG90TUR1CldMQVplbm1LRFhKRU84TzNMcmdjTXh1OG5qekl2S3RRUjV3dlFRL1FwQkJoTW1JdnR1bkZidi96UnpEMEFzc0YKSjgwVHN2R2xSeENVam5iTjVIQlJWQ0VOMjBzOFpBc2g3bmlBSUMyRjF2dnRJQk92Yy91L1BiMzNZcjFqalJMbQpZZ2lET3Z4YmN0MlpZQ2NxZEw1M3NzMk8xakV5VUlTTXJFcTFsZEh4STVVQ2JiOGx2SDc4VnIrTUtZYUN2bVhVCkpvVzdBZ01CQUFHalB6QTlNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBYkNJYwpHa2F6M1dmRXVDS000L1ZpdXI2dkhpc1dxL2NnSFBCcHJDRHRVdC9rTUdyOVJDRjc4ME0yVXBRL2JablFiMU9FCnNCUjlhcFVUZW5NWXg2L0dhQ1hsUHFKbW1jMExYTlNoMk1CZU1PTVh1VVNCd3hpbFRtWlRsUDhBb2U3NkZXN2wKT0Q3d2hpOFNXb2VxMHYzZE1NRzF0eDhPR2xWeXBEUUdiNE4wVXQzdFk2dFNML1VqTmdSQ0tXc2RuSm9kMWp5UwppUXdBL054QXY3SmVGeDZxaEk0KytYUU1NaTZncHE4OG1MWTJYRWZ1NlpSMVREQ3B4OEtZZHlLTCs4MmFHa1pzClVWOUpTMEJsT1hKM0NBbC9tVDlldllCY1NpM2FjUXVIWk9SV2FEUHUrdTB2dzRreEVYcVk1cGViTnFlV1RzWEwKaWFERSszZzZwbHBCdFJEOHpRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBd1RsMkNHTGJpMDAvVUxUeC96RzNDeGdNcUtwTFUwUXRBb2lzS0owMUk3ajRqeFVzCitELzZ2NGo4YjNaSDhEQStnS0htUmtJdElaR2xCdnlzYnoxd2tZQU44MDgrdG1lcXYyK1d0RnJ6UUJmTGROTlYKS1A5ZjN4U09JMkdTbytnb1BUb09xUTFhZm54YmFMVEE3bGl3R1hwNWlnMXlSRHZEdHk2NEhETWJ2SjQ4eUx5cgpVRWVjTDBFUDBLUVFZVEppTDdicHhXNy84MGN3OUFMTEJTZk5FN0x4cFVjUWxJNTJ6ZVJ3VVZRaERkdExQR1FMCkllNTRnQ0F0aGRiNzdTQVRyM1A3dnoyOTkySzlZNDBTNW1JSWd6cjhXM0xkbVdBbktuUytkN0xOanRZeE1sQ0UKakt4S3RaWFI4U09WQW0yL0pieCsvRmEvakNtR2dyNWwxQ2FGdXdJREFRQUJBb0lCQURFTVlRWG44a3IrSk9CYgp6a0kxWUgyVWNVSXZXRWVldXI0MTYxMno2bFZURXVWZlByY1ZwcFVRTk9RbVprUjJPcWQwY1h2TU9LQ1kxQWRlCkJIZUlaUmJLSnNCb2tVYkVNZmUrWDhjUWYwYjV3MCs0aFptT21jdUs4RG5TL3VKVWdFSnFobVlyV1psWi8rb28KV0FFb3lpcnRpQVNmUFM1TTdYV0dpbjIrQzRCcFNPYjhFZm1ZZlprUldsMzUvTHg2cGNnVENBNmlBNmVra3JCUQoxOHVmWXpla0RxeGgyVGx0Ny9BWkwzaGpCN3ZuTmJJT2U3MTE1VWJvTGt2dTBsRXhxTGpFNTJ5V25CVmtDb3BKCms5ZmNaZ2t4ckNGdEJtMk1sdjliZHdTVythTzlWY2R0UUE5RUF5eHg3UlA4TEh0Q2Z4Q2g0RXRISkllZWFrT1oKaEtqL0lJRUNnWUVBK1R1cEpBb2VwV3p3MHcyZENHYkloZHhoSlZxNDN3empTQlNqRTgwT2tONEM4dkVVczlTNQozWW0zYnlzVFc1bEZIby9xNDh2czZDNkxyTi9xdFBtU2JCTWZEaUV3RFRYVVBDZmkzanN6aExocnM4L3lQSWpICll0UTU1c3VBcG5UOVFxd3g4U1NCL1IzMExtMnJkdzRwZjZtWHRpb3VLb1ZrenNCT0lIWEJzREVDZ1lFQXhuaUEKcGNkaVNFc0tFMGtHQVN0Ym0yZ1E0eHMyM051dEx3ZVRTNjJ0aU91RzV6N09mNG04OFBMSS9MR0NjbC83aHpMMgo0UnJFUnJCSndpT1k5Z0kwRUxUT0QrRXRRY2FLWWI1WE12d1BGKzBwTVRycFZXQlN4Y0RkSHpKWjhZSUM0ejk0Cm90bE1qUHd4UjlUU3h4eDZBbi9DeHdTa0Q1a1l4VVV1Vit0SzVhc0NnWUJrM0lvVXRhdTFVcU1iSmxVNGd5Ly8KVERKY1JaeXZWNjNiQzg3N1FtNzBuWVFnQVFSWnltcjFocmdmV3hWWWFteVljN0doUW5PN2VxcTM2VjQ0b3c5bwpnVXgrRVZ3NjNGL3BnRkxGa0x2R3FFT2QzemV1MjhPazhUSUZmckd2cTRTYXFNa0ZSN3I3VGxYMVBCaTU4NWRECnZNUlN5anNvcGhjbnZKZGhkNFpNNFFLQmdHQjhzdVpsY1ZWK0RhN2tnR1BQSldEL0RiNnJPMWZTQUhidHN1RkcKMVNmTWdUQW82NUU3Y0R5ZmU3REZ4NG85T1hZNEE2ZmFNSFBCUG9xQWJkdWpwSlkrb0RNK0lKZHFvMW56aEVjSQpIWHBmVlBoWEVKcnVFaStMbkxTTzhRVWxWS3dQN21FVlRVNzVTQ2dJd2xRRWR4aUI3anA4K2htUEwyaXdRbUNCCnhrNnpBb0dBUTVEdmJnbkdTTXdLdTJNeHdIc0EwWllPZUkrVFBTb0pCc3pXbmlpb1gzbnZEcUpqdW9PZkh0Y1YKR2dDNGJQbU5kSHl6ejVTSldTZWZha0R1bmxuUzJvcWJHd2xDcC9TVGkxYXd3RUpaSkpxTmkySkl3SWEwWE10NgpueVBRWkF5b0h1SmpHYjFyc1AxSHFUb0l0Z2VZWHdtTHhaSXl0ZXZMR0pyVWhlN3UwQ009Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIml6ZWwtaGFyYm9yLW5vdGFyeS1zaWduZXIiLAogICAgInBvcnQiOiAiNzg5OSIsCiAgICAidGxzX2NhX2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L2NhLmNydCIsCiAgICAia2V5X2FsZ29yaXRobSI6ICJlY2RzYSIKICB9LAogICJsb2dnaW5nIjogewogICAgImxldmVsIjogImluZm8iCiAgfSwKICAic3RvcmFnZSI6IHsKICAgICJiYWNrZW5kIjogInBvc3RncmVzIiwKICAgICJkYl91cmwiOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBpemVsLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNlcnZlcj9zc2xtb2RlPWRpc2FibGUiCiAgfSwKICAiYXV0aCI6IHsKICAgICJ0eXBlIjogInRva2VuIiwKICAgICJvcHRpb25zIjogewogICAgICAicmVhbG0iOiAiaHR0cHM6Ly9jb3JlLmhhcmJvci5pemVsbmFrcmkuY29tL3NlcnZpY2UvdG9rZW4iLAogICAgICAic2VydmljZSI6ICJoYXJib3Itbm90YXJ5IiwKICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgInJvb3RjZXJ0YnVuZGxlIjogIi9yb290LmNydCIKICAgIH0KICB9Cn0=
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAaXplbC1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzaWduZXI/c3NsbW9kZT1kaXNhYmxlIiwKICAgICJkZWZhdWx0X2FsaWFzIjogImRlZmF1bHRhbGlhcyIKICB9Cn0=
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "OGJMa0V4MUhvd3lqZWt4bg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: izel-harbor-trivy
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9pemVsLWhhcmJvci1yZWRpczo2Mzc5LzU=
  gitHubToken: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "izel-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "izel-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://core.harbor.izelnakri.com"
  CORE_URL: "http://izel-harbor-core:80"
  JOBSERVICE_URL: "http://izel-harbor-jobservice"
  REGISTRY_URL: "http://izel-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://izel-harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://izel-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "izel-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://izel-harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://izel-harbor-clair:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://izel-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://izel-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "izel-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://izel-harbor-redis:6379/2"
  PORTAL_URL: "http://izel-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://izel-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://izel-harbor-core:80"
  TOKEN_SERVICE_URL: "http://izel-harbor-core:80/service/token"
  REGISTRY_URL: "http://izel-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://izel-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "izel-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/portal/comfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-portal"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "izel-harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: izel-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: izel-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: izel-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: izel
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-clair"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: izel
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: izel
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-database"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: izel
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: izel
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-notary-server
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: izel
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-notary-signer
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: izel
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-portal"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: izel
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: izel-harbor-redis
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: izel
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: izel
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "izel-harbor-trivy"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
  selector:
    release: izel
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 3f20e0d691299f8b5ec82bcd47588ac99de7fdd9fae87674404585b64d7b42e4
        checksum/secret: 3a1bf456493e6572b25eabe3cbaad3f5e82f8c31357a61e86d36b409d9e9b3c8
        checksum/secret-core: d8317f4a076aac88e69a6189a257632e436ad081204415d1abfc47b4a2b71518
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "izel-harbor-chartmuseum"
        - secretRef:
            name: "izel-harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: izel-harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: izel-harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-clair
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: 3e8557dd7f91d0e408b2771f2cd983b14e5989ea6e309763754dc255baa696b4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "izel-harbor-core,izel-harbor-jobservice,izel-harbor-database,izel-harbor-chartmuseum,izel-harbor-clair,izel-harbor-notary-server,izel-harbor-notary-signer,izel-harbor-registry,izel-harbor-portal,izel-harbor-trivy,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: izel-harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: izel-harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "izel-harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-core
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: izel
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 213c19c3cd9a755f83303163f4be69ba588f9e7dc4cfa88d80c24990e7b70f82
        checksum/secret: 5aed85a67eba2ac6688a2a319646724b5075803303dd4bb11c5b69026ee72ee6
        checksum/secret-jobservice: 03cdbfad54539461f25c85c02f6e7f63a3159d398b1267087afc19bf10a0c6ca
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "izel-harbor-core"
        - secretRef:
            name: "izel-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: izel-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "izel-harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: izel-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: izel-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: izel-harbor-core
      - name: ca-download
        secret:
          secretName: harbor-tls
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-jobservice"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: f034df1a985d6329bd0e3ced612d9180d9d58e94045d8d5854696cf087fab277
        checksum/configmap-env: 7d48586e3613fd54880ad209a46cf3e5f0d584ca861e86fe37cbef5c8fcd076e
        checksum/secret: cc2371f8c7784a31f43d140f6769b3589b382a03f11dffad319a2aa7b5b09ef9
        checksum/secret-core: f09f8f6a479920a3c99c9e69504ccc384ca149ada1156b0f233c3981bce056c9
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: izel-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "izel-harbor-jobservice-env"
        - secretRef:
            name: "izel-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "izel-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: izel-harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-notary-server
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: f65fe11511b8c8c2a3efaaddeb6f4fa4243cf653cc0907074a0058af292f9e9e
        checksum/secret-core: 2e3bb26c0af6e3d33bc7ea14bc11200a93e24cd52bda646d14d217cab895c2c4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@izel-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "izel-harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: izel-harbor-core
      - name: signer-certificate
        secret:
          secretName: izel-harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: izel-harbor-notary-signer
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 877a02dfcb20e5ef4383db1ae3565a82f778be028c6d3856cec7392e432b0ef1
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@izel-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "izel-harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: izel-harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-portal"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: izel
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "izel-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "izel-harbor-registry"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: d4d536b535b5b952c7737ec6f212d2f2412e5620a801b1299adced25dcb468c3
        checksum/secret: ad7725feee203b45b1e3e7d51f45df26eff092dc4c71df7b93f53c1ba7c5c34d
        checksum/secret-jobservice: 87f0906de5b3afe03f514de5214b1e2fec8b40094df8a9fb672afb78425fd29c
        checksum/secret-core: e28099c3f8d8d12a00b5c0c7aac0ae20b09d0bf1d92ce78b66d11df48aad78bc
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "izel-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "izel-harbor-registry"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: izel-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: izel-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: izel-harbor-registry
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-root-certificate
        secret:
          secretName: izel-harbor-core
      - name: registry-config
        configMap:
          name: "izel-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: izel-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "izel-harbor-database"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "izel-harbor-database"
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 272329a94ad9a2c9bdb8cc726edb70b53b4b862ce0ba2f52b5a00d61382a871a
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v1.10.2
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "izel-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: izel-harbor-redis
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: izel-harbor-redis
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: izel-harbor-trivy
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: izel-harbor-trivy
  selector:
    matchLabels:
      release: izel
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: f9adc0cc3c447a74fdbafe3709e13e89e5404c7834316b01dcb69cc7af5186f3
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.0.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: izel-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: izel-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: izel-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: izel
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "izel-harbor-ingress"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
  annotations:
    certmanager.k8s.io/acme-challenge-type: http01
    certmanager.k8s.io/cluster-issuer: harbor-issuer
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  tls:
  - secretName: harbor-tls
    hosts:
    - core.harbor.izelnakri.com
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: izel-harbor-portal
          servicePort: 80
      - path: /api/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /service/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /v2/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /chartrepo/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
      - path: /c/
        backend:
          serviceName: izel-harbor-core
          servicePort: 80
    host: core.harbor.izelnakri.com
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "izel-harbor-ingress-notary"
  labels:
    heritage: Helm
    release: izel
    chart: harbor
    app: "harbor"
  annotations:
    certmanager.k8s.io/acme-challenge-type: http01
    certmanager.k8s.io/cluster-issuer: harbor-issuer
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  tls:
  - secretName: harbor-tls
    hosts:
    - notary.harbor.izelnakri.com
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: izel-harbor-notary-server
          servicePort: 4443
    host: notary.harbor.izelnakri.com
