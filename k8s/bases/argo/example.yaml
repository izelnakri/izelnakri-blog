# TODO: optimize by checking out the repo only once?
# TODO: optimize by putting base-slim on artifact and update it when its outdated
# TODO: optimize by putting :latest on artifact
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: default-workflow
  namespace: argo
  generateName: default-workflow
spec:
  entrypoint: ci
  serviceAccountName: argo
  onExit: on-exit
  arguments:
    parameters:
    - name: branch
      value: master
    - name: sender
      value: admin
    - name: project
      value: placeholder
    - name: commitHash
      value: 0000000000000000000000000000000000000000
    - name: event
      value: something
    - name: git-url
      value: "https://git.izelnakri.com/izelnakri/website"
    - name: git-username
      value: "izelnakri" # NOTE: get this from secrets
    - name: git-password
      value: "" # NOTE: get this from secrets
    - name: registry-url
      value: "registry.izelnakri.com"
    - name: registry-project
      value: "private/website"
    - name: registry-username
      value: "" # NOTE: get this from secrets
    - name: registry-password
      value: "" # NOTE: get this from secrets
  # volumes:
  #   - name: git-secrets-volume
  #     secret:
  #       secretName: git-secret
  #   - name: registry-secrets-volume
  #     secret:
  #       secretName: registry-secret
  templates:
  - name: build-frontend-branch-image
    container:
      image: docker:stable-git
      command: [sh, -c]
      args:
        - git clone --single-branch --branch {{workflow.parameters.branch}} {{workflow.parameters.git-url}} &&
          cd website/frontend &&
          docker build . -t {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-frontend:{{workflow.parameters.branch}} &&
          echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USERNAME --password-stdin &&
          docker push {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-frontend:{{workflow.parameters.branch}}
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
      - name: REGISTRY_PASSWORD
        value: "{{workflow.parameters.registry-password}}"
      - naem: REGISTRY_USERNAME
        value: "{{workflow.parameters.registry-username}}"
    sidecars:
    - name: dind
      image: docker:17.10-dind
      securityContext:
        privileged: true
      mirrorVolumeMounts: true
  - name: build-backend-branch-image
    container:
      image: docker:stable-git
      command: [sh, -c]
      args:
        - git clone --single-branch --branch {{workflow.parameters.branch}} {{workflow.parameters.git-url}} &&
          cd website/backend &&
          docker build . -t {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-backend:{{workflow.parameters.branch}} &&
          echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USERNAME --password-stdin &&
          docker push {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-backend:{{workflow.parameters.branch}}
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
      - name: REGISTRY_PASSWORD
        value: "{{workflow.parameters.registry-password}}"
      - naem: REGISTRY_USERNAME
        value: "{{workflow.parameters.registry-username}}"
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
    sidecars:
    - name: dind
      image: docker:17.10-dind
      securityContext:
        privileged: true
      mirrorVolumeMounts: true
  - name: test-frontend
    container:
      image: docker:stable-git
      command: [sh, -c]
      args:
        - docker pull {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-frontend:{{workflow.parameters.branch}} &&
          docker run -t -d --name="target_container" {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-frontend:{{workflow.parameters.branch}} /bin/bash &&
          docker exec -it target_container npm test
  # - name: test-backend
  #   container:
  #     # image: docker:stable-git
  #     # TODO: many rooms for optimization
  #     command: [sh, -c]
  #     args:
  #       - docker pull {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-backend:{{workflow.parameters.branch}} &&
  #         docker run -t -d --name="mber" {{workflow.parameters.registry-url}}/{{workflow.parameters.registry-project}}-frontend:{{workflow.parameters.branch}} /bin/bash &&
  #         docker-compose run backend mix test
  - name: deploy-frontend
    container:
      image: docker:stable-git
      command: [sh, -c]
      args:
        - git clone --single-branch --branch {{workflow.parameters.branch}} {{workflow.parameters.git-url}} &&
          COMMIT_HASH=$(git rev-parse HEAD); &&
          COMMIT_HASH_REF=$($COMMIT_HASH | cut -c1-10);
          # sed -i 's/# expose this/# anan this/g' DRONE.yml
          # git add
          # git commit -m ""
          # git push
          # docker build
          # echo $REGISTRY_PASSWORD | docker login -u admin --password-stdin &&
          # docker push core.harbor.izelnakri.com/private/izelnakri/website-frontend:{{workflow.parameters.branch}}
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
    sidecars:
    - name: dind
      image: docker:17.10-dind
      securityContext:
        privileged: true
      mirrorVolumeMounts: true
  - name: deploy-backend
    container:
      image: docker:stable-git
      command: [sh, -c]
      args:
        - git clone --single-branch --branch {{workflow.parameters.branch}} {{workflow.parameters.git-url}}
          # COMMIT_HASH=$(git rev-parse HEAD); &&
          # COMMIT_HASH_REF=$($COMMIT_HASH | cut -c1-10);
          # sed -i 's/# expose this/# anan this/g' DRONE.yml
          # git add
          # git commit -m ""
          # git push
          # docker build
          # echo $REGISTRY_PASSWORD | docker login -u admin --password-stdin &&
          # docker push core.harbor.izelnakri.com/private/izelnakri/website-frontend:{{workflow.parameters.branch}}
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
    sidecars:
    - name: dind
      image: docker:17.10-dind
      securityContext:
        privileged: true
      mirrorVolumeMounts: true
  - name: ci
    dag:
      tasks:
        - name: build-frontend-branch-image
          template: build-frontend-branch-image
        - name: build-backend-branch-image
          template: build-backend-branch-image
        - name: test-frontend
          template: test-frontend
          dependencies: [build-frontend-branch-image]
        - name: test-backend
          template: test-backend
          dependencies: [build-backend-branch-image]
        - name: deploy-frontend
          template: deploy-frontend
          dependencies: [test-frontend, test-backend]
          when: "{{workflow.workflow.parameters.branch == master"
        - name: deploy-backend
          template: deploy-backend
          dependencies: [test-frontend, test-backend]
          when: "{{workflow.workflow.parameters.branch == master"
        # - name: whalesay
        #   container:
        #     image: docker/whalesay:latest
  - name: on-exit
    container:
      image: appropriate/curl
      command: [sh, -c]
      args: ["curl --header 'Content-Type: application/json' \
  --request POST \
  --data '{\"workflowName\":\"{{workflow.name}}\",\"workflowStatus\":\"{{workflow.status}}\"}' \
  http://a0dd6e3ab11a.ngrok.io/submit-workflow-result"]

  # curl --header 'Content-Type: application/json' \
  # --request POST \
  # --data '{"username":"xyz","password":"xyz"}' \
  # http://b3d3905423c2.ngrok.io/submit-workflow-result

  # on master do complex deployment logic
  # - name: whalesay
  #   container:
  #     image: docker/whalesay:latest
  #     command: [cowsay]
  #     args: ["hello world"]
